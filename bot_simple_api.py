#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import time
import os
import sqlite3
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8401405889:AAEGFi1tCX6k2m4MyGBoAY3MdJC63SXFba0')
MINI_APP_URL = os.getenv('MINI_APP_URL', 'https://vanporigon-tech.github.io/badminton-rating-app')
def _load_admin_ids():
    env_value = os.getenv("ADMIN_IDS", "").strip()
    ids = {972717950, 1119274177}
    if env_value:
        for token in env_value.split(","):
            token = token.strip()
            if token.isdigit():
                ids.add(int(token))
    return ids

ADMIN_IDS = _load_admin_ids()



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã - –ø–æ –¢–ó –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ localStorage —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False

def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setMyCommands"
    
    commands = [
        {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
        {"command": "help", "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"},
        {"command": "clear_rooms", "description": "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"},
        {"command": "start_tournament", "description": "–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"},
        {"command": "end_tournament", "description": "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"}
    ]
    
    data = {
        "commands": commands
    }
    
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            for cmd in commands:
                print(f"  /{cmd['command']} - {cmd['description']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")
        return False

def handle_start_command(chat_id, first_name, last_name=""):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    print(f"üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è {first_name}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    player_info = get_or_create_player(chat_id, first_name, last_name)
    display_name = player_info['full_name'] if player_info else first_name
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üè∏ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                    "web_app": {
                        "url": MINI_APP_URL
                    }
                }
            ]
        ]
    }
    
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {display_name}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞–Ω–≥ (G ‚Üí A). –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞: /setrank G"
    
    return send_message(chat_id, welcome_text, keyboard)

def handle_help_command(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    print(f"‚ùì –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    help_text = """
üè∏ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üéÆ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üëë <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/clear_rooms - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
/start_tournament - –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
/end_tournament - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä

üåê <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
https://vanporigon-tech.github.io/badminton-rating-app

üìä <b>–°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:</b>
‚Ä¢ Glicko-2 –∞–ª–≥–æ—Ä–∏—Ç–º
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1500
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1v1 –∏ 2v2 –∏–≥—Ä
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

üèÜ <b>–¢—É—Ä–Ω–∏—Ä—ã:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –∏–≥—Ä
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
‚Ä¢ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

‚ùì <b>–ü–æ–º–æ—â—å:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    return send_message(chat_id, help_text)


def set_rank(chat_id, rank, first_name, last_name, username):
    rank = rank.upper()
    if rank not in ["G","F","E","D","C","B","A"]:
        return send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–Ω–≥. –î–æ—Å—Ç—É–ø–Ω—ã: G,F,E,D,C,B,A")
    try:
        # Call backend API to set rank
        payload = {
            "telegram_id": chat_id,
            "first_name": first_name or "–ò–≥—Ä–æ–∫",
            "last_name": last_name or "",
            "username": username,
            "initial_rank": rank
        }
        resp = requests.post("http://localhost:8000/players/set_rank", json=payload, timeout=10)
        if resp.status_code == 200:
            p = resp.json()
            return send_message(chat_id, f"‚úÖ –†–∞–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rank}. –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {p.get('rating')}")
        else:
            return send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–Ω–≥: {resp.status_code}")
    except Exception as e:
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–Ω–≥–∞: {e}")

def handle_callback_query(chat_id, callback_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    # –í—Å–µ callback –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    return False


def handle_admin_clear_rooms(chat_id):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç (—Å–∫—Ä—ã—Ç–∞—è)"""
    print(f"üóëÔ∏è –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç –æ—Ç {chat_id}")
    
    if chat_id not in ADMIN_IDS:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
        import sqlite3
        
        db_path = "badminton.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cursor.execute("SELECT COUNT(*) FROM rooms")
        rooms_count = cursor.fetchone()[0]
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
        cursor.execute("DELETE FROM rooms")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
        cursor.execute("DELETE FROM sqlite_sequence WHERE name='rooms'")
        
        conn.commit()
        conn.close()
        
        success_message = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: {rooms_count}\nüí£ –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –∏ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!\nüîÑ –°—á–µ—Ç—á–∏–∫ ID —Å–±—Ä–æ—à–µ–Ω.\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Mini App –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!"
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {rooms_count} –∫–æ–º–Ω–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç: {str(e)}")
        success_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–º–Ω–∞—Ç: {str(e)}"
    
    return send_message(chat_id, success_message)

def handle_start_tournament(chat_id):
    """–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
    if chat_id not in ADMIN_IDS:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        response = requests.get("https://vanporigon-tech.github.io/badminton-rating-app/api/tournament/start.json")
        
        if response.status_code == 200:
            data = response.json()
            tournament_id = data.get('tournament_id')
            response_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –Ω–∞—á–∞—Ç!\n\n–í—Å–µ –∏–≥—Ä—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä –¥–æ –∫–æ–º–∞–Ω–¥—ã /end_tournament"
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {response.status_code}"
            
        return send_message(chat_id, response_text)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞: {str(e)}")

def handle_end_tournament(chat_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
    if chat_id not in ADMIN_IDS:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    
    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ API
        response = requests.get("https://vanporigon-tech.github.io/badminton-rating-app/api/tournament/end.json")
        
        if response.status_code == 200:
            data = response.json()
            tournament_id = data.get('tournament_id')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            data_response = requests.get(f"https://vanporigon-tech.github.io/badminton-rating-app/api/tournament/{tournament_id}.json")
            
            if data_response.status_code == 200:
                tournament_data = data_response.json()
                
                # –°–æ–∑–¥–∞–µ–º Google –¢–∞–±–ª–∏—Ü—É
                table_url = create_tournament_table(tournament_id, tournament_data)
                
                response_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {table_url}"
            else:
                response_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_response.status_code}"
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {response.status_code}"
            
        return send_message(chat_id, response_text)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {str(e)}")

def create_tournament_table(tournament_id, data):
    """–°–æ–∑–¥–∞—Ç—å Google –¢–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    from google_sheets import create_tournament_table as create_sheets_table
    return create_sheets_table(tournament_id, data)

def process_update(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if "message" in update:
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_info = message.get("from", {})
            first_name = user_info.get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            last_name = user_info.get("last_name", "")
            
            if "text" in message:
                text = message["text"]
                
                if text == "/start":
                    return handle_start_command(chat_id, first_name, last_name)
                elif text == "/help":
                    return handle_help_command(chat_id)
                elif text.lower().startswith("/setrank"):
                    parts = text.split()
                    if len(parts) >= 2:
                        rank = parts[1].strip()
                        username = user_info.get("username")
                        return set_rank(chat_id, rank, first_name, last_name, username)
                    else:
                        return send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /setrank <—Ä–∞–Ω–≥> (G..A)")
                elif text == "/admin_clear_rooms":
                    return handle_admin_clear_rooms(chat_id)
                elif text == "/start_tournament":
                    return handle_start_tournament(chat_id)
                elif text == "/end_tournament":
                    return handle_end_tournament(chat_id)
                else:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                    return True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        elif "callback_query" in update:
            callback_query = update["callback_query"]
            chat_id = callback_query["message"]["chat"]["id"]
            callback_data = callback_query["data"]
            
            return handle_callback_query(chat_id, callback_data)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        return False

def get_updates(offset=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    
    params = {
        "timeout": 30,
        "allowed_updates": ["message", "callback_query"]
    }
    
    if offset:
        params["offset"] = offset
    
    try:
        response = requests.get(url, params=params, timeout=35)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞...")
    print(f"üì± –¢–æ–∫–µ–Ω: {BOT_TOKEN[:20]}...")
    print(f"üåê Mini App URL: {MINI_APP_URL}")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    if not setup_bot_commands():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞")
        return
    
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram –±–æ—Ç—É @GoBadmikAppBot")
    print("=" * 50)
    
    offset = None
    
    while True:
        try:
            print("üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates_response = get_updates(offset)
            
            if updates_response and "result" in updates_response:
                updates = updates_response["result"]
                
                for update in updates:
                    update_id = update["update_id"]
                    offset = update_id + 1
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if not process_update(update):
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
            
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == "__main__":
    main()
