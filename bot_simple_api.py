#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import time
import os
from dotenv import load_dotenv
from sqlalchemy.orm import Session
from database_sqlite import get_db, SessionLocal
from crud_sqlite import get_player_by_telegram_id, create_player
from schemas import PlayerCreate

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8401405889:AAEGFi1tCX6k2m4MyGBoAY3MdJC63SXFba0')
MINI_APP_URL = os.getenv('MINI_APP_URL', 'https://vanporigon-tech.github.io/badminton-rating-app')
ADMIN_CHAT_ID = 972717950



def get_db_session():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return SessionLocal()

def get_or_create_player(telegram_id: int, first_name: str, last_name: str = "") -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db = get_db_session()
    try:
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        player = get_player_by_telegram_id(db, telegram_id)
        
        if player:
            # –û–±–Ω–æ–≤–∏—Ç—å –∏–º—è –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if first_name and (player.first_name != first_name or player.last_name != last_name):
                player.first_name = first_name
                if last_name:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
                    player.last_name = last_name
                db.commit()
                db.refresh(player)
            return {
                'id': player.id,
                'telegram_id': player.telegram_id,
                'first_name': player.first_name,
                'last_name': player.last_name,
                'full_name': f"{player.first_name} {player.last_name}"
            }
        else:
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if not last_name:
                last_name = "–ù–µ—É–∫–∞–∑–∞–Ω–æ"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            player_data = PlayerCreate(
                telegram_id=telegram_id,
                first_name=first_name,
                last_name=last_name
            )
            new_player = create_player(db, player_data)
            return {
                'id': new_player.id,
                'telegram_id': new_player.telegram_id,
                'first_name': new_player.first_name,
                'last_name': new_player.last_name,
                'full_name': f"{new_player.first_name} {new_player.last_name}"
            }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None
    finally:
        db.close()

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False

def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setMyCommands"
    
    commands = [
        {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"}
    ]
    
    data = {
        "commands": commands
    }
    
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")
        return False

def handle_start_command(chat_id, first_name, last_name=""):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    print(f"üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è {first_name}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    player_info = get_or_create_player(chat_id, first_name, last_name)
    display_name = player_info['full_name'] if player_info else first_name
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üè∏ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                    "web_app": {
                        "url": MINI_APP_URL
                    }
                }
            ]
        ]
    }
    
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {display_name}! üëã"
    
    return send_message(chat_id, welcome_text, keyboard)

def handle_callback_query(chat_id, callback_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    # –í—Å–µ callback –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    return False


def handle_admin_clear_rooms(chat_id):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç (—Å–∫—Ä—ã—Ç–∞—è)"""
    print(f"üóëÔ∏è –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç –æ—Ç {chat_id}")
    
    if chat_id != ADMIN_CHAT_ID:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
        import sqlite3
        
        db_path = "badminton.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cursor.execute("SELECT COUNT(*) FROM rooms")
        rooms_count = cursor.fetchone()[0]
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
        cursor.execute("DELETE FROM rooms")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
        cursor.execute("DELETE FROM sqlite_sequence WHERE name='rooms'")
        
        conn.commit()
        conn.close()
        
        success_message = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: {rooms_count}\nüí£ –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –∏ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!\nüîÑ –°—á–µ—Ç—á–∏–∫ ID —Å–±—Ä–æ—à–µ–Ω."
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {rooms_count} –∫–æ–º–Ω–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç: {str(e)}")
        success_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–º–Ω–∞—Ç: {str(e)}"
    
    return send_message(chat_id, success_message)

def handle_start_tournament(chat_id):
    """–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
    if chat_id != ADMIN_CHAT_ID:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        response = requests.get("https://vanporigon-tech.github.io/badminton-rating-app/api/tournament/start.json")
        
        if response.status_code == 200:
            data = response.json()
            tournament_id = data.get('tournament_id')
            response_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –Ω–∞—á–∞—Ç!\n\n–í—Å–µ –∏–≥—Ä—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä –¥–æ –∫–æ–º–∞–Ω–¥—ã /end_tournament"
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {response.status_code}"
            
        return send_message(chat_id, response_text)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞: {str(e)}")

def handle_end_tournament(chat_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
    if chat_id != ADMIN_CHAT_ID:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    
    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ API
        response = requests.get("https://vanporigon-tech.github.io/badminton-rating-app/api/tournament/end.json")
        
        if response.status_code == 200:
            data = response.json()
            tournament_id = data.get('tournament_id')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            data_response = requests.get(f"https://vanporigon-tech.github.io/badminton-rating-app/api/tournament/{tournament_id}.json")
            
            if data_response.status_code == 200:
                tournament_data = data_response.json()
                
                # –°–æ–∑–¥–∞–µ–º Google –¢–∞–±–ª–∏—Ü—É
                table_url = create_tournament_table(tournament_id, tournament_data)
                
                response_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {table_url}"
            else:
                response_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_response.status_code}"
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {response.status_code}"
            
        return send_message(chat_id, response_text)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {str(e)}")

def create_tournament_table(tournament_id, data):
    """–°–æ–∑–¥–∞—Ç—å Google –¢–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    from google_sheets import create_tournament_table as create_sheets_table
    return create_sheets_table(tournament_id, data)

def process_update(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if "message" in update:
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_info = message.get("from", {})
            first_name = user_info.get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            last_name = user_info.get("last_name", "")
            
            if "text" in message:
                text = message["text"]
                
                if text == "/start":
                    return handle_start_command(chat_id, first_name, last_name)
                elif text == "/admin_clear_rooms":
                    return handle_admin_clear_rooms(chat_id)
                elif text == "/start_tournament":
                    return handle_start_tournament(chat_id)
                elif text == "/end_tournament":
                    return handle_end_tournament(chat_id)
                else:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                    return True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        elif "callback_query" in update:
            callback_query = update["callback_query"]
            chat_id = callback_query["message"]["chat"]["id"]
            callback_data = callback_query["data"]
            
            return handle_callback_query(chat_id, callback_data)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        return False

def get_updates(offset=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    
    params = {
        "timeout": 30,
        "allowed_updates": ["message", "callback_query"]
    }
    
    if offset:
        params["offset"] = offset
    
    try:
        response = requests.get(url, params=params, timeout=35)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞...")
    print(f"üì± –¢–æ–∫–µ–Ω: {BOT_TOKEN[:20]}...")
    print(f"üåê Mini App URL: {MINI_APP_URL}")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    if not setup_bot_commands():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞")
        return
    
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram –±–æ—Ç—É @GoBadmikAppBot")
    print("=" * 50)
    
    offset = None
    
    while True:
        try:
            print("üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates_response = get_updates(offset)
            
            if updates_response and "result" in updates_response:
                updates = updates_response["result"]
                
                for update in updates:
                    update_id = update["update_id"]
                    offset = update_id + 1
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if not process_update(update):
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
            
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == "__main__":
    main()
