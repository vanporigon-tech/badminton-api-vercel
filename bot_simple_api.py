#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import time
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
MINI_APP_URL = os.getenv('MINI_APP_URL', 'https://vanporigon-tech.github.io/badminton-rating-app')
API_BASE_URL = os.getenv('API_BASE_URL', 'https://badminton-api-vercel.onrender.com')
def _load_admin_ids():
    env_value = os.getenv("ADMIN_IDS", "").strip()
    ids = {972717950, 1119274177}
    if env_value:
        for token in env_value.split(","):
            token = token.strip()
            if token.isdigit():
                ids.add(int(token))
    return ids

ADMIN_IDS = _load_admin_ids()



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã - –ø–æ –¢–ó –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ localStorage —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=data, timeout=15)
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False

RANK_TO_RATING = {
    "G": 600,
    "F": 700,
    "E": 800,
    "D": 900,
    "C": 1000,
    "B": 1100,
    "A": 1200,
}

def send_rank_prompt(chat_id):
    msg = (
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Å–∏—Å—Ç–µ–º–µ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É):\n\n"
        "G = 600\nF = 700\nE = 800\nD = 900\nC = 1000\nB = 1100\nA = 1200\n\n"
        "–ü—Ä–∏–º–µ—Ä: /setrank C"
    )
    keyboard = {
        "inline_keyboard": [
            [ {"text": f"G ({RANK_TO_RATING['G']})", "callback_data": "setrank:G"}, {"text": f"F ({RANK_TO_RATING['F']})", "callback_data": "setrank:F"} ],
            [ {"text": f"E ({RANK_TO_RATING['E']})", "callback_data": "setrank:E"}, {"text": f"D ({RANK_TO_RATING['D']})", "callback_data": "setrank:D"} ],
            [ {"text": f"C ({RANK_TO_RATING['C']})", "callback_data": "setrank:C"}, {"text": f"B ({RANK_TO_RATING['B']})", "callback_data": "setrank:B"} ],
            [ {"text": f"A ({RANK_TO_RATING['A']})", "callback_data": "setrank:A"} ],
        ]
    }
    return send_message(chat_id, msg, keyboard)

def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setMyCommands"
    
    commands = [
        {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
        {"command": "help", "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"},
        {"command": "clear_rooms", "description": "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"},
        {"command": "start_tournament", "description": "–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"},
        {"command": "end_tournament", "description": "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"}
    ]
    
    data = {
        "commands": commands
    }
    
    try:
        response = requests.post(url, json=data, timeout=15)
        if response.status_code == 200:
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            for cmd in commands:
                print(f"  /{cmd['command']} - {cmd['description']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")
        return False

def handle_start_command(chat_id, first_name, last_name="", username=""):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    print(f"üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è {first_name}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ API (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    display_name = first_name
    player_initial_rank = None
    try:
        payload = {
            "telegram_id": chat_id,
            "first_name": first_name or "–ò–≥—Ä–æ–∫",
            "last_name": last_name or "",
            "username": username or ""
        }
        resp = requests.post(f"{API_BASE_URL}/players/", json=payload, timeout=15)
        if resp.status_code == 200:
            p = resp.json()
            fn = p.get("first_name") or first_name
            ln = p.get("last_name") or ""
            display_name = f"{fn} {ln}".strip()
            player_initial_rank = p.get("initial_rank")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ API: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üè∏ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    "web_app": {
                        "url": MINI_APP_URL
                    }
                }
            ]
        ]
    }
    
    # –ï—Å–ª–∏ —Ä–∞–Ω–∫ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ä–∞–Ω–≥, –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not player_initial_rank:
        send_rank_prompt(chat_id)
        return send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {display_name}! üëã", keyboard)

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ /start: —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Å—ã–ª–∫–∞
    return send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {display_name}! üëã", keyboard)

def handle_help_command(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    print(f"‚ùì –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    help_text = """
üè∏ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üéÆ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üëë <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/clear_rooms - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
/start_tournament - –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
/end_tournament - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä

üåê <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
https://vanporigon-tech.github.io/badminton-rating-app

üìä <b>–°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:</b>
‚Ä¢ Glicko-2 –∞–ª–≥–æ—Ä–∏—Ç–º
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1500
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1v1 –∏ 2v2 –∏–≥—Ä
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

üèÜ <b>–¢—É—Ä–Ω–∏—Ä—ã:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –∏–≥—Ä
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
‚Ä¢ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

‚ùì <b>–ü–æ–º–æ—â—å:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    return send_message(chat_id, help_text)


def disable_webhook():
    """–û—Ç–∫–ª—é—á–∏—Ç—å –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ polling"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
        resp = requests.post(url, json={"drop_pending_updates": False}, timeout=10)
        if resp.status_code == 200 and resp.json().get("ok"):
            print("‚úÖ –í–µ–±—Ö—É–∫ –æ—Ç–∫–ª—é—á—ë–Ω (polling –∞–∫—Ç–∏–≤–µ–Ω)")
            return True
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–µ–±—Ö—É–∫: {resp.status_code} {resp.text}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return False

def set_rank(chat_id, rank, first_name, last_name, username, force=True):
    rank = rank.upper()
    if rank not in ["G","F","E","D","C","B","A"]:
        return send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–Ω–≥. –î–æ—Å—Ç—É–ø–Ω—ã: G,F,E,D,C,B,A")
    try:
        # Call backend API to set rank
        payload = {
            "telegram_id": chat_id,
            "first_name": first_name or "–ò–≥—Ä–æ–∫",
            "last_name": last_name or "",
            "username": username,
            "initial_rank": rank
        }
        params = {"force": "true" if force else "false"}
        resp = requests.post(f"{API_BASE_URL}/players/set_rank", json=payload, params=params, timeout=10)
        if resp.status_code == 200:
            p = resp.json()
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ –Ω–∞ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            send_message(chat_id, f"‚úÖ –†–∞–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rank}. –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {p.get('rating')}")
            keyboard = {"inline_keyboard": [[{"text": "üè∏ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "web_app": {"url": MINI_APP_URL}}]]}
            return send_message(chat_id, "–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É.", keyboard)
        else:
            return send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–Ω–≥: {resp.status_code}")
    except Exception as e:
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–Ω–≥–∞: {e}")

def handle_callback_query(chat_id, callback_data, user_info=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    try:
        if callback_data.startswith("setrank:"):
            rank = callback_data.split(":", 1)[1].strip().upper()
            first_name = user_info.get("first_name", "–ò–≥—Ä–æ–∫") if user_info else "–ò–≥—Ä–æ–∫"
            last_name = user_info.get("last_name", "") if user_info else ""
            username = user_info.get("username") if user_info else None
            return set_rank(chat_id, rank, first_name, last_name, username, force=True)
    except Exception:
        pass
    return False


def handle_admin_clear_rooms(chat_id, user_id):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç —á–µ—Ä–µ–∑ API"""
    print(f"üóëÔ∏è –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç –æ—Ç chat_id={chat_id} user_id={user_id}")
    if user_id not in ADMIN_IDS:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    try:
        send_message(chat_id, "‚è≥ –û—á–∏—â–∞—é –∫–æ–º–Ω–∞—Ç—ã...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–∞—Å—Å–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏
        print(f"üîß –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ API: {API_BASE_URL}/rooms/clear_all")
        dr = requests.delete(f"{API_BASE_URL}/rooms/clear_all", timeout=30)
        print(f"üîß –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏: status={dr.status_code} body={dr.text[:200]}")
        if dr.status_code == 200:
            data = dr.json()
            return send_message(chat_id, f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: rooms={data.get('rooms_deleted',0)}, members={data.get('members_deleted',0)}")
        else:
            return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {dr.status_code}")
    except Exception as e:
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç: {e}")

_current_tournaments = {}

def handle_start_tournament(chat_id, user_id):
    """–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
    if user_id not in ADMIN_IDS:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        check = requests.get(f"{API_BASE_URL}/tournaments/active", timeout=15)
        if check.status_code == 200:
            t = check.json()
            _current_tournaments[chat_id] = t.get('id')
            return send_message(chat_id, f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä #{t.get('id')}. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /end_tournament")
        resp = requests.post(f"{API_BASE_URL}/tournaments/start", json={}, timeout=15)
        if resp.status_code == 200:
            data = resp.json()
            tournament_id = data.get('id')
            _current_tournaments[chat_id] = tournament_id
            response_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –Ω–∞—á–∞—Ç!\n\n–í—Å–µ –∏–≥—Ä—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä –¥–æ –∫–æ–º–∞–Ω–¥—ã /end_tournament"
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {resp.status_code}"
            
        return send_message(chat_id, response_text)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞: {str(e)}")

def handle_end_tournament(chat_id, user_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
    if user_id not in ADMIN_IDS:
        return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    
    try:
        # –í —Å–∏—Å—Ç–µ–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π
        resp = requests.post(f"{API_BASE_URL}/tournaments/end_latest", json={}, timeout=30)
        if resp.status_code == 200:
            data = resp.json()
            _current_tournaments.pop(chat_id, None)
            tid = data.get('tournament_id')
            return send_message(chat_id, f"üèÅ –¢—É—Ä–Ω–∏—Ä #{tid} –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–∞–±–ª–∏—Ü–∞: {data.get('sheet_url','')}")
        else:
            return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {resp.status_code}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {str(e)}")

def create_tournament_table(tournament_id, data):
    """–°–æ–∑–¥–∞—Ç—å Google –¢–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    from google_sheets import create_tournament_table as create_sheets_table
    return create_sheets_table(tournament_id, data)

def process_update(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if "message" in update:
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_info = message.get("from", {})
            first_name = user_info.get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            last_name = user_info.get("last_name", "")
            
            if "text" in message:
                text = message["text"]
                
                print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: '{text}'")
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {chat_id} in {ADMIN_IDS} = {chat_id in ADMIN_IDS}")
                user_id = user_info.get("id")
                print(f"üîç user_id={user_id} admin={user_id in ADMIN_IDS if user_id else None}")
                
                if text == "/start":
                    username = user_info.get("username", "")
                    return handle_start_command(chat_id, first_name, last_name, username)
                elif text == "/help":
                    return handle_help_command(chat_id)
                elif text.lower().startswith("/setrank"):
                    parts = text.split()
                    if len(parts) >= 2:
                        raw = parts[1].strip()
                        rank = raw.rstrip('!')
                        username = user_info.get("username")
                        return set_rank(chat_id, rank, first_name, last_name, username, force=True)
                    else:
                        return send_rank_prompt(chat_id)
                elif text.strip().lower().startswith("/clear_rooms") or text == "/admin_clear_rooms":
                    print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /clear_rooms –æ—Ç chat_id={chat_id} user_id={user_id}")
                    return handle_admin_clear_rooms(chat_id, user_id)
                elif text == "/start_tournament":
                    return handle_start_tournament(chat_id, user_id)
                elif text.startswith("/end_tournament"):
                    parts = text.split()
                    if len(parts) >= 2 and parts[1].isdigit():
                        if user_id not in ADMIN_IDS:
                            return send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                        tid = int(parts[1])
                        try:
                            resp = requests.post(f"{API_BASE_URL}/tournaments/{tid}/end", json={}, timeout=30)
                            if resp.status_code == 200:
                                data = resp.json()
                                return send_message(chat_id, f"üèÅ –¢—É—Ä–Ω–∏—Ä #{tid} –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–∞–±–ª–∏—Ü–∞: {data.get('sheet_url','')}")
                            else:
                                return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {resp.status_code}")
                        except Exception as e:
                            return send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    else:
                        return handle_end_tournament(chat_id, user_id)
                else:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                    return True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        elif "callback_query" in update:
            callback_query = update["callback_query"]
            chat_id = callback_query["message"]["chat"]["id"]
            callback_data = callback_query["data"]
            from_info = callback_query.get("from", {})
            return handle_callback_query(chat_id, callback_data, user_info=from_info)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        return False

def get_updates(offset=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    
    params = {
        "timeout": 30,
        "allowed_updates": ["message", "callback_query"]
    }
    
    if offset:
        params["offset"] = offset
    
    try:
        response = requests.get(url, params=params, timeout=35)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    try:
        r = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getMe", timeout=10)
        if r.status_code != 200:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π BOT_TOKEN –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω Telegram API: {r.status_code} {r.text}")
            return
        me = r.json().get('result', {})
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ @{me.get('username','unknown')}")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω: {e}")
        return

    print(f"üåê Mini App URL: {MINI_APP_URL}")
    print(f"üîó API_BASE_URL: {API_BASE_URL}")
    print("=" * 50)
    
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –±—ã–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω) ‚Äî –∏–Ω–∞—á–µ polling –Ω–µ –ø–æ–ª—É—á–∏—Ç –∞–ø–¥–µ–π—Ç—ã
    disable_webhook()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    if not setup_bot_commands():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞")
        return
    
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram –±–æ—Ç—É @GoBadmikAppBot")
    print("=" * 50)
    
    offset = None
    
    while True:
        try:
            print("üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates_response = get_updates(offset)
            
            if updates_response and "result" in updates_response:
                updates = updates_response["result"]
                
                for update in updates:
                    update_id = update["update_id"]
                    offset = update_id + 1
                    
                    print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update_id: {update_id}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if not process_update(update):
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update_id}")
                    else:
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ update_id: {update_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
            
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == "__main__":
    main()
