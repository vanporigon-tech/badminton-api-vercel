#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Badminton Rating Mini App
"""

import asyncio
import logging
from telegram import Update, BotCommand, WebAppInfo, BotCommandScopeChat
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from config import settings
import httpx
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–Ω–≥–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
RANK_TO_RATING = {
    "G": 600,
    "F": 700,
    "E": 800,
    "D": 900,
    "C": 1100,
    "B": 1400,
    "A": 1700,
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_text = f"""
üè∏ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Badminton Rating Mini App!

–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º –≤ –±–∞–¥–º–∏–Ω—Ç–æ–Ω
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
‚Ä¢ –ò–≥—Ä–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:
"""
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App —á–µ—Ä–µ–∑ InlineKeyboardButton + web_app
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="üè∏ –û—Ç–∫—Ä—ã—Ç—å Badminton Rating", web_app=WebAppInfo(url=settings.MINI_APP_URL))]
    ])

    await update.message.reply_text(welcome_text, reply_markup=keyboard)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    base_text = """
üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å Mini App
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/rating - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
/about - –û –ø—Ä–æ–µ–∫—Ç–µ
/whoami - –ú–æ–π ID –∏ —Ä–µ–π—Ç–∏–Ω–≥
"""
    admin_text = """

–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ):
/tstart [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞)
/tend [id] ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–±–µ–∑ id ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π)
/treport <id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ —Ç—É—Ä–Ω–∏—Ä—É
"""
    tail_text = """

üì± Mini App —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –∏–≥—Ä
‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π –∏–≥—Ä—ã (2v2, 1v1)

üè∏ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:
‚Ä¢ F (–Ω–∏–∂–µ 500) - –ù–∞—á–∏–Ω–∞—é—â–∏–π
‚Ä¢ E (500-799) - –õ—é–±–∏—Ç–µ–ª—å  
‚Ä¢ D (800-1099) - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
‚Ä¢ C (1100-1399) - –û–ø—ã—Ç–Ω—ã–π
‚Ä¢ B (1400-1699) - –ú–∞—Å—Ç–µ—Ä
‚Ä¢ A (1700+) - –≠–∫—Å–ø–µ—Ä—Ç
"""

    chat = update.effective_chat
    is_admin = _is_admin(update.effective_user.id)
    help_text = base_text + (admin_text if is_admin and chat.type == "private" else "") + tail_text
    
    await update.message.reply_text(help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")

async def rating_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    rating_text = """
üèÜ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞

–≠—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ —Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä–∞—è:

üìä –£—á–∏—Ç—ã–≤–∞–µ—Ç:
‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞
‚Ä¢ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞ (RD)
‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
‚Ä¢ –°–∏–ª—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤

üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —É—Ä–æ–≤–Ω—è
‚Ä¢ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –£—á–µ—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π –∏–≥—Ä—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã

üîÑ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ò–≥—Ä–æ–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
2. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏
3. –†–µ–π—Ç–∏–Ω–≥ —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ –ø–æ–±–µ–¥–∞—Ö –∏ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è—Ö
4. –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∏–ª–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:
‚Ä¢ F: –Ω–∏–∂–µ 500 (–Ω–∞—á–∏–Ω–∞—é—â–∏–π)
‚Ä¢ E: 500-799 (–ª—é–±–∏—Ç–µ–ª—å)
‚Ä¢ D: 800-1099 (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)
‚Ä¢ C: 1100-1399 (–æ–ø—ã—Ç–Ω—ã–π)
‚Ä¢ B: 1400-1699 (–º–∞—Å—Ç–µ—Ä)
‚Ä¢ A: 1700+ (—ç–∫—Å–ø–µ—Ä—Ç)
"""
    
    await update.message.reply_text(rating_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ")

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û –ø—Ä–æ–µ–∫—Ç–µ"""
    about_text = """
üè∏ Badminton Rating Mini App

üì± –ß—Ç–æ —ç—Ç–æ:
Telegram Mini App –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –±–∞–¥–º–∏–Ω—Ç–æ–Ω–µ.

üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –∏–≥—Ä
‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞ (1v1, 2v2)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
‚Ä¢ –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä—è–º–æ –≤ Telegram
"""
    
    await update.message.reply_text(about_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ")

async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tid = update.effective_user.id
    uname = update.effective_user.username or "-"
    fn = update.effective_user.first_name or ""
    ln = update.effective_user.last_name or ""
    api_line = ""
    try:
        async with httpx.AsyncClient(timeout=8.0) as client:
            r = await client.get(f"{settings.API_BASE_URL}/players/{tid}")
            if r.status_code == 200:
                pj = r.json()
                api_line = f"\nAPI: rating={pj.get('rating')} rank={pj.get('initial_rank')} games={pj.get('games_count')}"
            else:
                api_line = f"\nAPI: not found ({r.status_code})"
    except Exception as e:
        api_line = f"\nAPI error: {e}"
    await update.message.reply_text(
        f"ID: {tid}\nUsername: @{uname}\nName: {fn} {ln}{api_line}"
    )

def _is_admin(user_id: int) -> bool:
    return user_id in settings.ADMIN_IDS

async def tstart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    chat = update.effective_chat
    if not _is_admin(user_id) or chat.type != "private":
        return
    name = " ".join(context.args) if context.args else datetime.now().strftime("%Y-%m-%d")
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            resp = await client.post(f"{settings.API_BASE_URL}/tournaments/start", json={"name": name})
            if resp.status_code != 200:
                text = resp.text
                try:
                    j = resp.json()
                    text = j.get("detail") or j
                except Exception:
                    pass
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {resp.status_code} {text}")
                return
            data = resp.json()
            tid = data.get("id") or data.get("tournament_id")
            await update.message.reply_text(f"üèÅ –¢—É—Ä–Ω–∏—Ä #{tid} –Ω–∞—á–∞—Ç ‚Äî {name}")
    except httpx.RequestError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e.__class__.__name__}: {e}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

async def tend(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    chat = update.effective_chat
    if not _is_admin(user_id) or chat.type != "private":
        return
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            if context.args:
                tid = int(context.args[0])
                resp = await client.post(f"{settings.API_BASE_URL}/tournaments/{tid}/end")
                if resp.status_code != 200:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {resp.status_code} {resp.text}")
                    return
                ended = resp.json()
                tid = ended.get("tournament_id") or tid
            else:
                resp = await client.post(f"{settings.API_BASE_URL}/tournaments/end_latest")
                if resp.status_code != 200:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {resp.status_code} {resp.text}")
                    return
                ended = resp.json()
                tid = ended.get("tournament_id")

            # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç
            report_resp = await client.get(f"{settings.API_BASE_URL}/tournaments/{tid}/report")
            if report_resp.status_code == 200:
                report = report_resp.json().get("report", "")
                await update.message.reply_text(report[:4000])
            else:
                await update.message.reply_text(f"–¢—É—Ä–Ω–∏—Ä #{tid} –∑–∞–≤–µ—Ä—à—ë–Ω. –û—Ç—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except httpx.RequestError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e.__class__.__name__}: {e}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

async def treport(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    chat = update.effective_chat
    if not _is_admin(user_id) or chat.type != "private":
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ id —Ç—É—Ä–Ω–∏—Ä–∞: /treport <id>")
        return
    try:
        tid = int(context.args[0])
        async with httpx.AsyncClient(timeout=10.0) as client:
            report_resp = await client.get(f"{settings.API_BASE_URL}/tournaments/{tid}/report")
            if report_resp.status_code == 200:
                report = report_resp.json().get("report", "")
                await update.message.reply_text(report[:4000])
            else:
                await update.message.reply_text(f"–û—Ç—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {report_resp.text}")
    except httpx.RequestError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e.__class__.__name__}: {e}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App"""
    if update.effective_message.web_app_data:
        data = update.effective_message.web_app_data.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App: {data}")
        
        await update.message.reply_text(
            "üì± –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Mini App!\n\n"
            "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ Mini App —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
        )

async def setup_commands(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    base_commands = [
        BotCommand("start", "üè∏ –ó–∞–ø—É—Å—Ç–∏—Ç—å Badminton Rating"),
        BotCommand("help", "üîç –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("rating", "üèÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"),
        BotCommand("about", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"),
        BotCommand("whoami", "–ú–æ–π ID –∏ —Ä–µ–π—Ç–∏–Ω–≥"),
    ]

    # –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏—á–∫–µ ‚Äî —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    await application.bot.set_my_commands(base_commands)

    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ—á–µ—á–Ω–æ –ø–æ chat_id) –¥–æ–±–∞–≤–∏–º –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –≤ –∏—Ö –ª–∏—á–∫—É
    admin_commands = base_commands + [
        BotCommand("tstart", "–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä (admin)"),
        BotCommand("tend", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (admin)"),
        BotCommand("treport", "–û—Ç—á—ë—Ç —Ç—É—Ä–Ω–∏—Ä–∞ (admin)"),
    ]
    for admin_id in settings.ADMIN_IDS:
        try:
            await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
        except Exception:
            continue
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üì± –¢–æ–∫–µ–Ω: {settings.TELEGRAM_BOT_TOKEN[:20]}...")
    print("üåê Mini App URL: http://localhost:8000/app")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.post_init = setup_commands
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rating", rating_info))
    application.add_handler(CommandHandler("about", about))
    application.add_handler(CommandHandler("whoami", whoami))
    # Admin-only tournament commands
    application.add_handler(CommandHandler("tstart", tstart))
    application.add_handler(CommandHandler("tend", tend))
    application.add_handler(CommandHandler("treport", treport))
    # –£–±—Ä–∞–ª–∏ /setrank; –≤–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–µ–ø–µ—Ä—å –≤ Mini App
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π" –∑–∞–≥–ª—É—à–∫–µ
    application.add_handler(MessageHandler(
        filters.COMMAND & ~filters.Regex(r"^/(start|help|rating|about|tstart|tend|treport)(\s|$)"),
        help_command
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram –±–æ—Ç—É @GoBadmikAppBot")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
