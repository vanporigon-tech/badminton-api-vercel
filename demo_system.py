#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Badminton Rating Mini App
"""

import os
import sys
import subprocess
import time
import requests

def print_header():
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("üè∏" * 20)
    print("üè∏ BADMINTON RATING MINI APP üè∏")
    print("üè∏" * 20)
    print()

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import fastapi
        print("‚úÖ FastAPI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå FastAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import psycopg2
        print("‚úÖ psycopg2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import telegram
        print("‚úÖ python-telegram-bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n")
    return True

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_USER', 'DB_PASSWORD',
        'TELEGRAM_BOT_TOKEN', 'TELEGRAM_BOT_USERNAME'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n")
    return True

def check_postgresql():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("üêò –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    
    try:
        import psycopg2
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT'),
            database=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD')
        )
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ\n")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        return False

def test_telegram_bot():
    """–¢–µ—Å—Ç Telegram –±–æ—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç Telegram –±–æ—Ç–∞...")
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    url = f"https://api.telegram.org/bot{token}/getMe"
    
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data['result']
                print(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: @{bot_info.get('username')}")
                print(f"   –ò–º—è: {bot_info.get('first_name')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('description')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def start_services():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    print("1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
    print("   –ö–æ–º–∞–Ω–¥–∞: python3 run.py")
    print("   URL: http://localhost:8000")
    print("   Mini App: http://localhost:8000/app")
    print()
    
    print("2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print("   –ö–æ–º–∞–Ω–¥–∞: python3 bot.py")
    print("   –ë–æ—Ç: @GoBadmikAppBot")
    print()
    
    print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    print("   –¢–µ—Å—Ç API: python3 test_app.py")
    print("   –¢–µ—Å—Ç –±–æ—Ç–∞: python3 test_bot.py")
    print("   –î–µ–º–æ Glicko-2: python3 demo_glicko2.py")
    print()

def show_usage_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("üì± –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
    print("=" * 50)
    
    print("1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("   python3 setup_database.py")
    print()
    
    print("2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö:")
    print("   –¢–µ—Ä–º–∏–Ω–∞–ª 1: python3 run.py")
    print("   –¢–µ—Ä–º–∏–Ω–∞–ª 2: python3 bot.py")
    print()
    
    print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
    print("   –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000/app")
    print()
    
    print("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Telegram:")
    print("   –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞: @GoBadmikAppBot")
    print("   –û—Ç–ø—Ä–∞–≤—å—Ç–µ: /start")
    print("   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üè∏ –û—Ç–∫—Ä—ã—Ç—å Badminton Rating'")
    print()
    
    print("5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–≥—Ä—ã:")
    print("   - –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É")
    print("   - –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤")
    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É")
    print("   - –í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç")
    print("   - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏")
    print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_dependencies():
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip3 install -r requirements.txt")
        return
    
    if not check_environment():
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    if not check_postgresql():
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ PostgreSQL")
        return
    
    if not test_telegram_bot():
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        return
    
    print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 50)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    start_services()
    show_usage_instructions()
    
    print("üèÜ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞–¥–º–∏–Ω—Ç–æ–Ω! üè∏")

if __name__ == "__main__":
    main()

